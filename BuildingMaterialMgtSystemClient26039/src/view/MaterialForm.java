/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;


import model.Material;
import java.awt.GridLayout;
import java.io.File;
import java.io.FileWriter;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import service.MaterialService;

import java.awt.image.BufferedImage;
import java.awt.Graphics2D;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import javax.imageio.ImageIO;
import java.awt.Desktop;
import com.itextpdf.text.Document;
import com.itextpdf.text.Image;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.PdfWriter;

/**
 *
 * @author user2
 */
public class MaterialForm extends javax.swing.JFrame {
     private String userRole;
     private MaterialService materialService;
    /**
     * Creates new form MaterialForm
     */
    public MaterialForm(String userRole) throws RemoteException {
        this.userRole = userRole;
        initComponents();
         try{
        
         Registry registry = LocateRegistry.getRegistry("localhost", 6000);
        materialService = (MaterialService) registry.lookup("material");
        } catch(Exception ex){
            ex.printStackTrace();
        }
        setTitle("Material Management");
        setLocationRelativeTo(null);
        if (!"Admin".equalsIgnoreCase(userRole)) {
        Insert.setVisible(false); // Hide ADD button for employees
    }
        loadMaterialData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
        private void loadMaterialData() throws RemoteException {
                      
        List<Material> materials = materialService.findAll();
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);
        for (Material material : materials) {
            model.addRow(new Object[]{
                material.getMaterial_id(),
                material.getName(),
                material.getCategory(),
                material.getQuantity(),
                material.getUnitPrice()
            });
        }

    }
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField4 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        nametxt = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        quantitytxt = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        unitPricetxt = new javax.swing.JTextField();
        Insert = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        Dashboard = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        Display = new javax.swing.JButton();
        Delete = new javax.swing.JButton();
        Search = new javax.swing.JButton();
        Update = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        download = new javax.swing.JButton();
        printBtn = new javax.swing.JButton();

        jTextField4.setText("jTextField4");

        jButton3.setText("jButton3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("         MATERIALS MANAGEMENT");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Name");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Category");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Building Material", "Paints", "Steels", "Glass", "Cements", " " }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Quantity");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("UnitPrice");

        Insert.setBackground(new java.awt.Color(255, 255, 0));
        Insert.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        Insert.setForeground(new java.awt.Color(153, 153, 0));
        Insert.setText("ADD");
        Insert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InsertActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Material Id", "Name", "Category", "Quantity", "UnitPrice"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        Dashboard.setBackground(new java.awt.Color(255, 255, 0));
        Dashboard.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        Dashboard.setForeground(new java.awt.Color(153, 153, 0));
        Dashboard.setText("BACK TO DASHBOARD");
        Dashboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DashboardActionPerformed(evt);
            }
        });

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/View/building.jpg"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(236, 236, 236)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nametxt, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(quantitytxt, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(unitPricetxt, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(107, 107, 107)
                        .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(121, 121, 121)
                .addComponent(Insert, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Dashboard, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(114, 114, 114))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(nametxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(quantitytxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(unitPricetxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(Insert)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59)
                .addComponent(Dashboard)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(0, 153, 153));

        Display.setBackground(new java.awt.Color(255, 255, 0));
        Display.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        Display.setForeground(new java.awt.Color(153, 153, 0));
        Display.setText("Display");
        Display.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DisplayActionPerformed(evt);
            }
        });

        Delete.setBackground(new java.awt.Color(255, 255, 0));
        Delete.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        Delete.setForeground(new java.awt.Color(153, 153, 0));
        Delete.setText("Delete");
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });

        Search.setBackground(new java.awt.Color(255, 255, 0));
        Search.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        Search.setForeground(new java.awt.Color(153, 153, 0));
        Search.setText("Search");
        Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchActionPerformed(evt);
            }
        });

        Update.setBackground(new java.awt.Color(255, 255, 0));
        Update.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        Update.setForeground(new java.awt.Color(153, 153, 0));
        Update.setText("Update");
        Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(255, 255, 0));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jButton1.setForeground(new java.awt.Color(153, 153, 0));
        jButton1.setText("LOGOUT");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        download.setBackground(new java.awt.Color(255, 255, 0));
        download.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        download.setForeground(new java.awt.Color(153, 153, 0));
        download.setText("Download");
        download.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadActionPerformed(evt);
            }
        });

        printBtn.setText("PRINT");
        printBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGap(67, 67, 67)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(Search)
                                .addComponent(Delete)
                                .addComponent(Display, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Update, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                            .addGap(49, 49, 49)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(printBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(download)))
                .addContainerGap(72, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(109, 109, 109)
                .addComponent(Display)
                .addGap(50, 50, 50)
                .addComponent(Delete)
                .addGap(63, 63, 63)
                .addComponent(Search)
                .addGap(45, 45, 45)
                .addComponent(Update)
                .addGap(60, 60, 60)
                .addComponent(download)
                .addGap(54, 54, 54)
                .addComponent(jButton1)
                .addGap(57, 57, 57)
                .addComponent(printBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
        // TODO add your handling code here:
                
         // Step 1: Ask for TIN (same as delete)
    String input = JOptionPane.showInputDialog(this, "Enter Material Id  to Delete:");
    
    if (input == null || input.trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Material id cannot be empty!", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    
    int material_id;
try{
     material_id = Integer.parseInt(input);
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Please enter a valid numeric ID!", "Error", JOptionPane.ERROR_MESSAGE);
        return;
}

    // Step 2: Find taxpayer (same as delete)
    Material materialsObj = new Material();
    materialsObj.setMaterial_id(material_id);
         try {
             materialsObj=materialService.searchMaterial(material_id);
         } catch (RemoteException ex) {
             Logger.getLogger(MaterialForm.class.getName()).log(Level.SEVERE, null, ex);
         }

    if (materialsObj != null) {
        // Step 3: Show current info (modified from delete)
        String message = "CURRENT Materials INFO\n" +
                       "---------------------\n" +
                       "Material_Id   : " + materialsObj.getMaterial_id() + "\n" +
                       "Name   : "        + materialsObj.getName() + "\n" +
                       "Category : "      + materialsObj.getCategory() + "\n" +
                       "Quantity: "       + materialsObj.getQuantity() + "\n" +
                       "UnitPrice: "       + materialsObj.getUnitPrice();
        int confirm = JOptionPane.showConfirmDialog(this, message, "Confirm Deletion", JOptionPane.YES_NO_OPTION);

    if (confirm == JOptionPane.YES_OPTION) {
        // Step 5: Proceed with deletion
        int rowAffected = 0;
            try {
                rowAffected = materialService.deleteMaterial(materialsObj);
            } catch (RemoteException ex) {
                Logger.getLogger(MaterialForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        if (rowAffected > 0) {
            JOptionPane.showMessageDialog(this, "Data Deleted Successfully!");
            try {
                loadMaterialData();  // Refresh table
            } catch (RemoteException ex) {
                Logger.getLogger(MaterialForm.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {
            JOptionPane.showMessageDialog(this, "Data Not Deleted!!");
        }
    }
} else {
    JOptionPane.showMessageDialog(this, "Material Information Not Found!");
}
    }//GEN-LAST:event_DeleteActionPerformed

    private void InsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InsertActionPerformed
    String name = nametxt.getText().trim();
    String category = (String) jComboBox1.getSelectedItem();
    String qtyText = quantitytxt.getText().trim();
    String priceText = unitPricetxt.getText().trim();

    // 1. Validation
    if (name.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Name is required.", "Validation Error", JOptionPane.ERROR_MESSAGE);
        nametxt.requestFocus();
        return;
    }
    if (category == null || category.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Category must be selected.", "Validation Error", JOptionPane.ERROR_MESSAGE);
        jComboBox1.requestFocus();
        return;
    }
    int quantity;
    try {
        quantity = Integer.parseInt(qtyText);
        if (quantity <= 0) throw new NumberFormatException();
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Quantity must be a positive integer.", "Validation Error", JOptionPane.ERROR_MESSAGE);
        quantitytxt.requestFocus();
        return;
    }
    double unitPrice;
    try {
        unitPrice = Double.parseDouble(priceText);
        if (unitPrice < 0) throw new NumberFormatException();
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Unit price must be a non-negative number.", "Validation Error", JOptionPane.ERROR_MESSAGE);
        unitPricetxt.requestFocus();
        return;
    }

    // 2. Show Confirmation before inserting
    int confirm = JOptionPane.showConfirmDialog(
            this,
            "Are you sure you want to insert this material?",
            "Confirm Insertion",
            JOptionPane.OK_CANCEL_OPTION
    );

    if (confirm == JOptionPane.OK_OPTION) {
        // 3. Build your model (no need to set material_id if it's auto-increment)
        Material material = new Material();
        material.setName(name);
        material.setCategory(category);
        material.setQuantity(quantity);
        material.setUnitPrice(unitPrice);

        
        int result = 0;
        try {
            result = materialService.addMaterial(material);
        } catch (RemoteException ex) {
            Logger.getLogger(MaterialForm.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (result > 0) {
            JOptionPane.showMessageDialog(this, "✅ Material Registered Successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            try {
                loadMaterialData();  // refresh your table
            } catch (RemoteException ex) {
                Logger.getLogger(MaterialForm.class.getName()).log(Level.SEVERE, null, ex);
            }

            // 5. Clear the form for fresh input
            nametxt.setText("");
            jComboBox1.setSelectedIndex(-1);
            quantitytxt.setText("");
            unitPricetxt.setText("");
            nametxt.requestFocus();
        } else {
            JOptionPane.showMessageDialog(this, "❌ Failed to register material.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        JOptionPane.showMessageDialog(this, "Insertion cancelled by user.", "Cancelled", JOptionPane.INFORMATION_MESSAGE);
    }
       
    }//GEN-LAST:event_InsertActionPerformed

    private void DisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DisplayActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DisplayActionPerformed

    private void DashboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DashboardActionPerformed
        // TODO add your handling code here:
                if (userRole.equalsIgnoreCase("Admin")) {
        new AdminDashboardForm().setVisible(true);
    } else if (userRole.equalsIgnoreCase("Employee")) {
        new EmployeeDashboardForm().setVisible(true);
    }
    dispose();
        
    }//GEN-LAST:event_DashboardActionPerformed

    private void SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchActionPerformed
       
        

// Step 1: Ask for material_id
String input = JOptionPane.showInputDialog(this, "Enter Material  Id to Search:");

if (input == null || input.trim().isEmpty()) {
    JOptionPane.showMessageDialog(this, "Material Id cannot be empty!", "Error", JOptionPane.ERROR_MESSAGE);
    return;
}

// Step 2: Initialize and set material_id
int material_id;
try{
     material_id = Integer.parseInt(input);
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Please enter a valid numeric ID!", "Error", JOptionPane.ERROR_MESSAGE);
        return;
}
Material materialsObj = new Material();
materialsObj.setMaterial_id(material_id);

         try {
             // Step 3: Find the material by material_id
             materialsObj = materialService.searchMaterial(material_id);
         } catch (RemoteException ex) {
             Logger.getLogger(MaterialForm.class.getName()).log(Level.SEVERE, null, ex);
         }

if (materialsObj != null) {
    // Step 4: Display material details for confirmation
   // Step 3: Show current info (modified from delete)
        String message = "CURRENT Materials INFO\n" +
                       "---------------------\n" +
                       "Material_Id   : " + materialsObj.getMaterial_id() + "\n" +
                       "Name   : "        + materialsObj.getName() + "\n" +
                       "Category : "      + materialsObj.getCategory() + "\n" +
                       "Quantity: "       + materialsObj.getQuantity() + "\n" +
                       "UnitPrice: "       + materialsObj.getUnitPrice();
         int confirm = JOptionPane.showConfirmDialog(
            this, 
            new Object[] { message }, 
            "Update Material", 
            JOptionPane.OK_CANCEL_OPTION
                 
        );
            }
else{
        JOptionPane.showMessageDialog(this, "Material Information Not Found!");
}
    }//GEN-LAST:event_SearchActionPerformed

    private void UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateActionPerformed
       
    String input = JOptionPane.showInputDialog(this, "Enter Material Id  to Update:");
    
    if (input == null || input.trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Material id cannot be empty!", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    
    int material_id;
try{
     material_id = Integer.parseInt(input);
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Please enter a valid numeric ID!", "Error", JOptionPane.ERROR_MESSAGE);
        return;
}

    // Step 2: Find taxpayer (same as delete)
    Material materialsObj = new Material();
    materialsObj.setMaterial_id(material_id);
         try {
             materialsObj=materialService.searchMaterial(material_id);
         } catch (RemoteException ex) {
             Logger.getLogger(MaterialForm.class.getName()).log(Level.SEVERE, null, ex);
         }

    if (materialsObj != null) {
        // Step 3: Show current info (modified from delete)
        String message = "CURRENT Materials INFO\n" +
                       "---------------------\n" +
                       "Material_Id   : " + materialsObj.getMaterial_id() + "\n" +
                       "Name   : "        + materialsObj.getName() + "\n" +
                       "Category : "      + materialsObj.getCategory() + "\n" +
                       "Quantity: "       + materialsObj.getQuantity() + "\n" +
                       "UnitPrice: "       + materialsObj.getUnitPrice();
        
        // Step 4: Create input dialog for new values
        JPanel panel = new JPanel(new GridLayout(5, 2));        
        panel.add(new JLabel("New Names:"));
        JTextField nameField = new JTextField(materialsObj.getName());
        panel.add(nameField);
        
        panel.add(new JLabel("New category:"));
        JTextField categoryField = new JTextField(materialsObj.getCategory());
        panel.add(categoryField);
        
        panel.add(new JLabel("New Quantity:"));
        JTextField quantityField = new JTextField(String.valueOf(materialsObj.getQuantity()));
        panel.add(quantityField);
        
        panel.add(new JLabel("New UnitPrice:"));
        JTextField unitPriceField = new JTextField(String.valueOf(materialsObj.getUnitPrice()));
        panel.add(unitPriceField);

        int confirm = JOptionPane.showConfirmDialog(
            this, 
            new Object[] { message, panel }, 
            "Update Material", 
            JOptionPane.OK_CANCEL_OPTION
        );

        if (confirm == JOptionPane.OK_OPTION) {
            // Step 5: Update record
            materialsObj.setName(nameField.getText());
            materialsObj.setCategory(categoryField.getText());
        }
            
            
            try {
    // 1) Trim & validate
    String q = quantityField.getText().trim();
    String p = unitPriceField.getText().trim();

    if (!q.matches("\\d+")) {
        throw new NumberFormatException("Quantity must be a whole number");
    }
    if (!p.matches("\\d+(\\.\\d{1,2})?")) {
        throw new NumberFormatException("Unit price must be a number, e.g. 12 or 12.50");
    }

    // 2) Parse
    int newQty       = Integer.parseInt(q);
    double newPrice  = Double.parseDouble(p);

    // 3) Set on your model
    materialsObj.setQuantity(newQty);
    materialsObj.setUnitPrice(newPrice);

    // 4) Persist
    int rowAffected = materialService.updateMaterial(materialsObj);
    if (rowAffected > 0) {
        JOptionPane.showMessageDialog(this, "Update Successful!");
        loadMaterialData(); // Refresh table
    } else {
        JOptionPane.showMessageDialog(this, "Update Failed!");
    }
}
catch (NumberFormatException ex) {
    JOptionPane.showMessageDialog(
        this,
        "Invalid amount format:\n" + ex.getMessage(),
        "Error",
        JOptionPane.ERROR_MESSAGE
    );
}       catch (RemoteException ex) {
            Logger.getLogger(MaterialForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
       
    }//GEN-LAST:event_UpdateActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
            String[] options = {"Logout", "Exit", "Cancel"};
    int choice = JOptionPane.showOptionDialog(
        this,
        "What would you like to do?",
        "Confirm",
        JOptionPane.YES_NO_CANCEL_OPTION,
        JOptionPane.QUESTION_MESSAGE,
        null,
        options,
        options[0]
    );

    switch (choice) {
        case 0: // Logout
            if ("Admin".equalsIgnoreCase(userRole)) {
                new AdminDashboardForm().setVisible(true);
            } else {
                new EmployeeDashboardForm().setVisible(true);
            }
            this.dispose();
            break;

        case 1: // Exit
            System.exit(0);
            break;

        case 2: // Cancel
        default:
            // do nothing
            break;
    }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void downloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadActionPerformed
        // TODO add your handling code here:
JFileChooser fileChooser = new JFileChooser();
    fileChooser.setDialogTitle("Save Report As");

    int userSelection = fileChooser.showSaveDialog(this);

    if (userSelection == JFileChooser.APPROVE_OPTION) {
        try {
            File fileToSave = fileChooser.getSelectedFile();
            FileWriter fw = new FileWriter(fileToSave + ".txt");

            // === HEADER ===
            fw.write("\t*** Building Material Management System Report ***\n");
            fw.write("\tDate: " + java.time.LocalDate.now() + "\n\n");
            
            // === TABLE HEADER ===
            for (int i = 0; i < jTable1.getColumnCount(); i++) {
                fw.write(String.format("%-20s", jTable1.getColumnName(i)));
            }
            fw.write("\n");
            fw.write("-----------------------------------------------------------------------------------------\n");

            // === TABLE DATA ===
            for (int i = 0; i < jTable1.getRowCount(); i++) {
                for (int j = 0; j < jTable1.getColumnCount(); j++) {
                    Object cell = jTable1.getValueAt(i, j);
                    fw.write(String.format("%-20s", cell == null ? "N/A" : cell.toString()));
                }
                fw.write("\n");
            }

            fw.write("\nReport generated successfully ✅\n");
            fw.close();
            JOptionPane.showMessageDialog(this, "✅ Report downloaded successfully!");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "❌ Error downloading report: " + ex.getMessage());
        }
    }
    }//GEN-LAST:event_downloadActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void printBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printBtnActionPerformed
       try {
        // Capture screenshot of the JFrame
        BufferedImage screenshot = new BufferedImage(
            this.getWidth(), 
            this.getHeight(), 
            BufferedImage.TYPE_INT_RGB
        );
        Graphics2D g2d = screenshot.createGraphics();
        this.paint(g2d); // Paint the JFrame onto the BufferedImage
        g2d.dispose();

        // Define the directory and file name for the PDF
        String downloadDir = "C:\\Users\\user2\\Downloads\\Final Downloads";
      
        String fileName = "JFrame_Image_" + System.currentTimeMillis() + ".pdf";
        File dir = new File(downloadDir);
        if (!dir.exists()) {
            dir.mkdirs();
        }
        File pdfFile = new File(dir, fileName);

        // Create PDF using iText 5
        Document document = new Document();
        PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(pdfFile));
        document.open();

        // Convert BufferedImage to iText Image
        Image pdfImage = Image.getInstance(screenshot, null);

        // Scale the image to fit the A4 page
        Rectangle pageSize = document.getPageSize();
        float pageWidth = pageSize.getWidth() - document.leftMargin() - document.rightMargin();
        float pageHeight = pageSize.getHeight() - document.topMargin() - document.bottomMargin();
        float imageWidth = pdfImage.getWidth();
        float imageHeight = pdfImage.getHeight();
        float scale = Math.min(pageWidth / imageWidth, pageHeight / imageHeight);
        pdfImage.scaleAbsolute(imageWidth * scale, imageHeight * scale);

        // Center the image on the page
        pdfImage.setAlignment(Image.ALIGN_CENTER);
        document.add(pdfImage);

        // Close the document
        document.close();
        writer.close();

        // Open the generated PDF
        if (Desktop.isDesktopSupported()) {
            Desktop.getDesktop().open(pdfFile);
        } else {
            JOptionPane.showMessageDialog(this, "Desktop is not supported. PDF saved at: " + pdfFile.getAbsolutePath());
        }

        JOptionPane.showMessageDialog(this, "Document saved as PDF successfully at: " + pdfFile.getAbsolutePath());

    } catch (IOException ex) {
        Logger.getLogger(MaterialForm.class.getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(this, "Error saving PDF: " + ex.getMessage());
    } catch (com.itextpdf.text.DocumentException ex) {
        Logger.getLogger(MaterialForm.class.getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(this, "Error creating PDF: " + ex.getMessage());
    }
    }//GEN-LAST:event_printBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MaterialForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MaterialForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MaterialForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MaterialForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */

           try {
        for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("Nimbus".equals(info.getName())) {
                javax.swing.UIManager.setLookAndFeel(info.getClassName());
                break;
            }
        }
    } catch (Exception ex) {
        java.util.logging.Logger.getLogger(MaterialForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }

    java.awt.EventQueue.invokeLater(() -> {
            try {
                new MaterialForm("Admin").setVisible(true); // Or "Employee"
            } catch (RemoteException ex) {
                Logger.getLogger(MaterialForm.class.getName()).log(Level.SEVERE, null, ex);
            }
    });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Dashboard;
    private javax.swing.JButton Delete;
    private javax.swing.JButton Display;
    private javax.swing.JButton Insert;
    private javax.swing.JButton Search;
    private javax.swing.JButton Update;
    private javax.swing.JButton download;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField nametxt;
    private javax.swing.JButton printBtn;
    private javax.swing.JTextField quantitytxt;
    private javax.swing.JTextField unitPricetxt;
    // End of variables declaration//GEN-END:variables

  
}
