/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import com.itextpdf.text.Document;
import com.itextpdf.text.Image;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Desktop;
import java.awt.Graphics2D;
import model.Material;
import model.Purchase;
import model.Supplier;
import java.awt.GridLayout;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.time.LocalDate;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import service.MaterialService;
import service.PurchaseService;
import service.SupplierService;

/**
 *
 * @author user2
 */
public class PurchaseForm extends javax.swing.JFrame {
    private String userRole;
    private SupplierService supplierService;
    private MaterialService materialService;
    private PurchaseService purchaseService;
            
    /**
     * Creates new form PurchaseForm
     */
    public PurchaseForm(String userRole) throws RemoteException {
        this.userRole = userRole;
        initComponents();
        try{
        
         Registry registry = LocateRegistry.getRegistry("localhost", 6000);
        supplierService = (SupplierService) registry.lookup("supplier");
        materialService = (MaterialService) registry.lookup("material");
        purchaseService = (PurchaseService) registry.lookup("purchase");
        } catch(Exception ex){
            ex.printStackTrace();
        }
        setTitle("Purchase Management");
        setLocationRelativeTo(null);
        if (!"Admin".equalsIgnoreCase(userRole)) {
        insert.setVisible(false); // Hide ADD button for employees
    }
        loadSuppliers();
        loadMaterials();
        loadPurchaseData();
        
    }
    
       private void loadPurchaseData() throws RemoteException {
       
        List<Purchase> purchases = purchaseService.findAll();
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);
        for (Purchase purchase : purchases) {
            model.addRow(new Object[]{
                purchase.getPurchase_id(),
                purchase.getSupplier_id(),
                purchase.getMaterial_id(),
                purchase.getQuantity(),
                purchase.getTotal_price(),
                purchase.getPurchase_date()
            });
        }
    }
       private void loadSuppliers() throws RemoteException {
    List<Supplier> suppliers = supplierService.findAll();
    SupplierComboBox.removeAllItems();
    for (Supplier s : suppliers) {
        SupplierComboBox.addItem(s.getSupplier_id() + " - " + s.getName());
    }
}

private void loadMaterials() throws RemoteException {
    List<Material> materials = materialService.findAll();
    MaterialComboBox.removeAllItems();
    for (Material m : materials) {
        MaterialComboBox.addItem(m.getMaterial_id() + " - " + m.getMaterial_name());
    }
}


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        quantitytxt = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        totalPricetxt = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        insert = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        Dashboard = new javax.swing.JButton();
        PurchaseDateChooser = new com.toedter.calendar.JDateChooser();
        SupplierComboBox = new javax.swing.JComboBox<>();
        MaterialComboBox = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        Display = new javax.swing.JButton();
        Delete = new javax.swing.JButton();
        Search = new javax.swing.JButton();
        Update = new javax.swing.JButton();
        logoutButton = new javax.swing.JButton();
        download = new javax.swing.JButton();
        printBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 153, 153));

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("           PURCHASE MANAGEMENT");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Supplier Id");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Material Id");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Quantity");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Total Price");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Purchase Date");

        insert.setBackground(new java.awt.Color(255, 255, 0));
        insert.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        insert.setForeground(new java.awt.Color(153, 153, 0));
        insert.setText("Add");
        insert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Purchase Id", "Supplier Id", "Material Id", "Quantity", "Total_price", "Purchase Date"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        Dashboard.setBackground(new java.awt.Color(255, 255, 0));
        Dashboard.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        Dashboard.setForeground(new java.awt.Color(153, 153, 0));
        Dashboard.setText("BACK TO DASHBOARD");
        Dashboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DashboardActionPerformed(evt);
            }
        });

        SupplierComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        MaterialComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(quantitytxt, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(totalPricetxt, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PurchaseDateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)
                    .addComponent(SupplierComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(MaterialComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(141, 141, 141))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(161, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 551, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(122, 122, 122))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(Dashboard, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(162, 162, 162))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(295, 295, 295)
                .addComponent(insert)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(64, 64, 64)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(SupplierComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel4))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(MaterialComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(quantitytxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(totalPricetxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(PurchaseDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addComponent(insert)
                .addGap(41, 41, 41)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 157, Short.MAX_VALUE)
                .addComponent(Dashboard)
                .addGap(29, 29, 29))
        );

        jPanel2.setBackground(new java.awt.Color(0, 153, 153));
        jPanel2.setForeground(new java.awt.Color(0, 102, 102));

        Display.setBackground(new java.awt.Color(255, 255, 0));
        Display.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        Display.setForeground(new java.awt.Color(153, 153, 0));
        Display.setText("Display");
        Display.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DisplayActionPerformed(evt);
            }
        });

        Delete.setBackground(new java.awt.Color(255, 255, 0));
        Delete.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        Delete.setForeground(new java.awt.Color(153, 153, 0));
        Delete.setText("Delete");
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });

        Search.setBackground(new java.awt.Color(255, 255, 0));
        Search.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        Search.setForeground(new java.awt.Color(153, 153, 0));
        Search.setText("Search");
        Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchActionPerformed(evt);
            }
        });

        Update.setBackground(new java.awt.Color(255, 255, 0));
        Update.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        Update.setForeground(new java.awt.Color(153, 153, 0));
        Update.setText("Update");
        Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateActionPerformed(evt);
            }
        });

        logoutButton.setBackground(new java.awt.Color(255, 255, 0));
        logoutButton.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        logoutButton.setForeground(new java.awt.Color(153, 153, 0));
        logoutButton.setText("LOGOUT");
        logoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutButtonActionPerformed(evt);
            }
        });

        download.setBackground(new java.awt.Color(255, 255, 0));
        download.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        download.setForeground(new java.awt.Color(153, 153, 0));
        download.setText("Download");
        download.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadActionPerformed(evt);
            }
        });

        printBtn.setText("Print");
        printBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(download)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(Display)
                                .addComponent(Search, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(Delete, javax.swing.GroupLayout.Alignment.LEADING))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(Update)
                                .addGap(4, 4, 4)))
                        .addGap(4, 4, 4))
                    .addComponent(logoutButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(printBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(128, 128, 128)
                .addComponent(Display)
                .addGap(60, 60, 60)
                .addComponent(Delete)
                .addGap(54, 54, 54)
                .addComponent(Search)
                .addGap(50, 50, 50)
                .addComponent(Update)
                .addGap(36, 36, 36)
                .addComponent(download)
                .addGap(46, 46, 46)
                .addComponent(logoutButton)
                .addGap(39, 39, 39)
                .addComponent(printBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void insertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertActionPerformed
        // TODO add your handling code here:
           Purchase purchase = new Purchase();

    try {
        // ✅ Validation
        if (quantitytxt.getText().trim().isEmpty() ||
            totalPricetxt.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "All fields must be filled!", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // ✅ Extract IDs from ComboBoxes
        String supplierItem = (String) SupplierComboBox.getSelectedItem();
        String materialItem = (String) MaterialComboBox.getSelectedItem();

        if (supplierItem == null || materialItem == null) {
            JOptionPane.showMessageDialog(this, "Please select supplier and material!", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int supplier_id = Integer.parseInt(supplierItem.split(" - ")[0]);
        int material_id = Integer.parseInt(materialItem.split(" - ")[0]);
        int quantity = Integer.parseInt(quantitytxt.getText().trim());
        double total_price = Double.parseDouble(totalPricetxt.getText().trim());

        java.util.Date selectedDate = PurchaseDateChooser.getDate();
        if (selectedDate == null) {
            JOptionPane.showMessageDialog(this, "Please select a purchase date!", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        LocalDate purchaseDate = selectedDate.toInstant().atZone(java.time.ZoneId.systemDefault()).toLocalDate();
        LocalDate today = LocalDate.now();

        // ✅ Validate that purchase date is today
        if (!purchaseDate.equals(today)) {
            JOptionPane.showMessageDialog(this, "Purchase date must be today's date!", "Date Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // ✅ Set values to the model
       
        purchase.setSupplier_id(supplier_id);
        purchase.setMaterial_id(material_id);
        purchase.setQuantity(quantity);
        purchase.setTotal_price(total_price);
        purchase.setPurchase_date(purchaseDate);

        // ✅ Confirm before inserting
        int confirm = JOptionPane.showConfirmDialog(
            this,
            "Are you sure you want to register this Purchase?",
            "Confirm Registration",
            JOptionPane.OK_CANCEL_OPTION
        );

        if (confirm == JOptionPane.OK_OPTION) {
            // ✅ Insert after confirmation
           
            int result = purchaseService.addPurchase(purchase);

            if (result > 0) {
                JOptionPane.showMessageDialog(this, "✅ Purchase Registered Successfully!");

                // ✅ Clear form fields
                
                quantitytxt.setText("");
                totalPricetxt.setText("");
                PurchaseDateChooser.setDate(null);
                SupplierComboBox.setSelectedIndex(-1);
                MaterialComboBox.setSelectedIndex(-1);

                loadPurchaseData(); // refresh JTable
            } else {
                JOptionPane.showMessageDialog(this, "❌ Failed to register Purchase!");
            }
        } else {
            // ❌ User clicked Cancel
            JOptionPane.showMessageDialog(this, "Operation cancelled. No data inserted.");
        }

    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Please enter valid numeric values.", "Input Error", JOptionPane.ERROR_MESSAGE);
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Unexpected error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }

    }//GEN-LAST:event_insertActionPerformed

    private void DisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DisplayActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DisplayActionPerformed

    private void DashboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DashboardActionPerformed
        // TODO add your handling code here:
                if (userRole.equalsIgnoreCase("Admin")) {
        new AdminDashboardForm().setVisible(true);
    } else if (userRole.equalsIgnoreCase("Employee")) {
        new EmployeeDashboardForm().setVisible(true);
    }
    dispose();
    }//GEN-LAST:event_DashboardActionPerformed

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
      

    String input = JOptionPane.showInputDialog(this, "Enter Purchase ID to Delete:");

    if (input == null || input.trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Purchase ID cannot be empty!", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    int purchase_id;
    try {
        purchase_id = Integer.parseInt(input);
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid ID format!", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // ✅ Use the correct DAO method
    Purchase purchasesObj = null;
        try {
            purchasesObj = purchaseService.searchPurchase(purchase_id);
        } catch (RemoteException ex) {
            Logger.getLogger(PurchaseForm.class.getName()).log(Level.SEVERE, null, ex);
        }

    if (purchasesObj != null) {
        String message = "CURRENT Purchase INFO\n"
                + "--------------------------\n"
                + "Purchase ID   : " + purchasesObj.getPurchase_id() + "\n"
                + "Supplier ID   : " + purchasesObj.getSupplier_id() + "\n"
                + "Material ID   : " + purchasesObj.getMaterial_id() + "\n"
                + "Quantity      : " + purchasesObj.getQuantity() + "\n"
                + "Total Price   : " + purchasesObj.getTotal_price() + "\n"
                + "Purchase Date : " + purchasesObj.getPurchase_date();

        int confirm = JOptionPane.showConfirmDialog(this, message, "Confirm Deletion", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            int result = 0;
            try {
                result = purchaseService.deletePurchase(purchasesObj);
            } catch (RemoteException ex) {
                Logger.getLogger(PurchaseForm.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (result > 0) {
                JOptionPane.showMessageDialog(this, "Purchase Deleted Successfully!");
                try {
                    loadPurchaseData(); // refresh table
                } catch (RemoteException ex) {
                    Logger.getLogger(PurchaseForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Failed to Delete Purchase!");
            }
        }
    } else {
        JOptionPane.showMessageDialog(this, "Purchase not found!");
    }
    }//GEN-LAST:event_DeleteActionPerformed

    private void SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchActionPerformed
    

    String input = JOptionPane.showInputDialog(this, "Enter Purchase ID to Search:");

    if (input == null || input.trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Purchase ID cannot be empty!", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    try {
        int purchase_id = Integer.parseInt(input);
        Purchase purchasesObj = purchaseService.searchPurchase(purchase_id);

        if (purchasesObj != null) {
            String message = "CURRENT Purchase INFO\n" +
                             "---------------------\n" +
                             "Purchase ID   : " + purchasesObj.getPurchase_id() + "\n" +
                             "Supplier ID   : " + purchasesObj.getSupplier_id() + "\n" +
                             "Material ID   : " + purchasesObj.getMaterial_id() + "\n" +
                             "Quantity      : " + purchasesObj.getQuantity() + "\n" +
                             "Total Price   : " + purchasesObj.getTotal_price() + "\n" +
                             "Purchase Date : " + purchasesObj.getPurchase_date();

            JOptionPane.showMessageDialog(this, message, "Search Result", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Purchase Not Found!", "Error", JOptionPane.ERROR_MESSAGE);
        }

    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid numeric ID!", "Error", JOptionPane.ERROR_MESSAGE);
    }   catch (RemoteException ex) {
            Logger.getLogger(PurchaseForm.class.getName()).log(Level.SEVERE, null, ex);
        }
      
    }//GEN-LAST:event_SearchActionPerformed

    private void UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateActionPerformed
            // Step 1: Ask for Purchase ID to update
    String input = JOptionPane.showInputDialog(this, "Enter Purchase ID to Update:");

    if (input == null || input.trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Purchase ID cannot be empty!", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    int purchase_id;
    try {
        purchase_id = Integer.parseInt(input);
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Please enter a valid numeric ID!", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Step 2: Find purchase by ID
    Purchase purchasesObj = null;
        try {
            purchasesObj = purchaseService.searchPurchase(purchase_id);
        } catch (RemoteException ex) {
            Logger.getLogger(PurchaseForm.class.getName()).log(Level.SEVERE, null, ex);
        }

    if (purchasesObj != null) {
        // Step 3: Display current data
        String message = "CURRENT Purchase INFO\n" +
                "--------------------------\n" +
                "Purchase ID   : " + purchasesObj.getPurchase_id() + "\n" +
                "Supplier ID   : " + purchasesObj.getSupplier_id() + "\n" +
                "Material ID   : " + purchasesObj.getMaterial_id() + "\n" +
                "Quantity      : " + purchasesObj.getQuantity() + "\n" +
                "Total Price   : " + purchasesObj.getTotal_price() + "\n" +
                "Purchase Date : " + purchasesObj.getPurchase_date();

        // Step 4: Input panel for new values
        JPanel panel = new JPanel(new GridLayout(4, 2));
        panel.add(new JLabel("New Quantity:"));
        JTextField quantityField = new JTextField(String.valueOf(purchasesObj.getQuantity()));
        panel.add(quantityField);

        panel.add(new JLabel("New Total Price:"));
        JTextField totalPriceField = new JTextField(String.valueOf(purchasesObj.getTotal_price()));
        panel.add(totalPriceField);

        panel.add(new JLabel("New Purchase Date (YYYY-MM-DD):"));
        JTextField purchaseDateField = new JTextField(String.valueOf(purchasesObj.getPurchase_date()));
        panel.add(purchaseDateField);

        int confirm = JOptionPane.showConfirmDialog(
                this,
                new Object[]{message, panel},
                "Update Purchase",
                JOptionPane.OK_CANCEL_OPTION
        );

        if (confirm == JOptionPane.OK_OPTION) {
            try {
                // Parse values
                int quantity = Integer.parseInt(quantityField.getText().trim());
                double totalPrice = Double.parseDouble(totalPriceField.getText().trim());
                LocalDate date = LocalDate.parse(purchaseDateField.getText().trim());

                purchasesObj.setQuantity(quantity);
                purchasesObj.setTotal_price(totalPrice);
                purchasesObj.setPurchase_date(date);

                int rowAffected = purchaseService.updatePurchase(purchasesObj);

                if (rowAffected > 0) {
                    JOptionPane.showMessageDialog(this, "Update Successful!");
                    loadPurchaseData(); // refresh table
                } else {
                    JOptionPane.showMessageDialog(this, "Update Failed!");
                }

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Invalid numeric input!", "Error", JOptionPane.ERROR_MESSAGE);
            } catch (IllegalArgumentException e) {
                JOptionPane.showMessageDialog(this, "Invalid date format! Use YYYY-MM-DD", "Error", JOptionPane.ERROR_MESSAGE);
            } catch (RemoteException ex) {
                Logger.getLogger(PurchaseForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    } else {
        JOptionPane.showMessageDialog(this, "Purchase with ID " + purchase_id + " not found!", "Not Found", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_UpdateActionPerformed

    private void logoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutButtonActionPerformed
        // TODO add your handling code here:
            String[] options = {"Logout", "Exit", "Cancel"};
    int choice = JOptionPane.showOptionDialog(
        this,
        "What would you like to do?",
        "Confirm",
        JOptionPane.YES_NO_CANCEL_OPTION,
        JOptionPane.QUESTION_MESSAGE,
        null,
        options,
        options[0]
    );

    switch (choice) {
        case 0: // Logout
            if ("Admin".equalsIgnoreCase(userRole)) {
                new AdminDashboardForm().setVisible(true);
            } else {
                new EmployeeDashboardForm().setVisible(true);
            }
            this.dispose();
            break;

        case 1: // Exit
            System.exit(0);
            break;

        case 2: // Cancel
        default:
            // do nothing
            break;
    }
    }//GEN-LAST:event_logoutButtonActionPerformed

    private void downloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
    fileChooser.setDialogTitle("Save Report As");

    int userSelection = fileChooser.showSaveDialog(this);

    if (userSelection == JFileChooser.APPROVE_OPTION) {
        try {
            File fileToSave = fileChooser.getSelectedFile();
            FileWriter fw = new FileWriter(fileToSave + ".txt");

            // === HEADER ===
            fw.write("\t*** Building Material Management System Report ***\n");
            fw.write("\tDate: " + java.time.LocalDate.now() + "\n\n");
            
            // === TABLE HEADER ===
            for (int i = 0; i < jTable1.getColumnCount(); i++) {
                fw.write(String.format("%-20s", jTable1.getColumnName(i)));
            }
            fw.write("\n");
            fw.write("---------------------------------------------------------------------------------------------------\n");

            // === TABLE DATA ===
            for (int i = 0; i < jTable1.getRowCount(); i++) {
                for (int j = 0; j < jTable1.getColumnCount(); j++) {
                    Object cell = jTable1.getValueAt(i, j);
                    fw.write(String.format("%-20s", cell == null ? "N/A" : cell.toString()));
                }
                fw.write("\n");
            }

            fw.write("\nReport generated successfully ✅\n");
            fw.close();
            JOptionPane.showMessageDialog(this, "✅ Report downloaded successfully!");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "❌ Error downloading report: " + ex.getMessage());
        }
    }
   
    }//GEN-LAST:event_downloadActionPerformed

    private void printBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printBtnActionPerformed
     try {
        // Capture screenshot of the JFrame
        BufferedImage screenshot = new BufferedImage(
            this.getWidth(), 
            this.getHeight(), 
            BufferedImage.TYPE_INT_RGB
        );
        Graphics2D g2d = screenshot.createGraphics();
        this.paint(g2d); // Paint the JFrame onto the BufferedImage
        g2d.dispose();

        // Define the directory and file name for the PDF
        String downloadDir = "C:\\Users\\user2\\Downloads\\Final Downloads";
      
        String fileName = "JFrame_Image_" + System.currentTimeMillis() + ".pdf";
        File dir = new File(downloadDir);
        if (!dir.exists()) {
            dir.mkdirs();
        }
        File pdfFile = new File(dir, fileName);

        // Create PDF using iText 5
        Document document = new Document();
        PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(pdfFile));
        document.open();

        // Convert BufferedImage to iText Image
        Image pdfImage = Image.getInstance(screenshot, null);

        // Scale the image to fit the A4 page
        Rectangle pageSize = document.getPageSize();
        float pageWidth = pageSize.getWidth() - document.leftMargin() - document.rightMargin();
        float pageHeight = pageSize.getHeight() - document.topMargin() - document.bottomMargin();
        float imageWidth = pdfImage.getWidth();
        float imageHeight = pdfImage.getHeight();
        float scale = Math.min(pageWidth / imageWidth, pageHeight / imageHeight);
        pdfImage.scaleAbsolute(imageWidth * scale, imageHeight * scale);

        // Center the image on the page
        pdfImage.setAlignment(Image.ALIGN_CENTER);
        document.add(pdfImage);

        // Close the document
        document.close();
        writer.close();

        // Open the generated PDF
        if (Desktop.isDesktopSupported()) {
            Desktop.getDesktop().open(pdfFile);
        } else {
            JOptionPane.showMessageDialog(this, "Desktop is not supported. PDF saved at: " + pdfFile.getAbsolutePath());
        }

        JOptionPane.showMessageDialog(this, "Document saved as PDF successfully at: " + pdfFile.getAbsolutePath());

    } catch (IOException ex) {
        Logger.getLogger(PurchaseForm.class.getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(this, "Error saving PDF: " + ex.getMessage());
    } catch (com.itextpdf.text.DocumentException ex) {
        Logger.getLogger(PurchaseForm.class.getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(this, "Error creating PDF: " + ex.getMessage());
    }
    }//GEN-LAST:event_printBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PurchaseForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PurchaseForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PurchaseForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PurchaseForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
                  try {
        for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("Nimbus".equals(info.getName())) {
                javax.swing.UIManager.setLookAndFeel(info.getClassName());
                break;
            }
        }
    } catch (Exception ex) {
        java.util.logging.Logger.getLogger(PurchaseForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }

    java.awt.EventQueue.invokeLater(() -> {
            try {
                new PurchaseForm("Admin").setVisible(true); // Or "Employee"
            } catch (RemoteException ex) {
                Logger.getLogger(PurchaseForm.class.getName()).log(Level.SEVERE, null, ex);
            }
    });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Dashboard;
    private javax.swing.JButton Delete;
    private javax.swing.JButton Display;
    private javax.swing.JComboBox<String> MaterialComboBox;
    private com.toedter.calendar.JDateChooser PurchaseDateChooser;
    private javax.swing.JButton Search;
    private javax.swing.JComboBox<String> SupplierComboBox;
    private javax.swing.JButton Update;
    private javax.swing.JButton download;
    private javax.swing.JButton insert;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton logoutButton;
    private javax.swing.JButton printBtn;
    private javax.swing.JTextField quantitytxt;
    private javax.swing.JTextField totalPricetxt;
    // End of variables declaration//GEN-END:variables
}
