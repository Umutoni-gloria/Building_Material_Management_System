/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;


import model.Material;
import model.Sale;
import java.awt.GridLayout;
import java.io.File;
import java.io.FileWriter;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import service.MaterialService;
import service.SaleService;

/**
 *
 * @author user2
 */
public class SaleForm extends javax.swing.JFrame {
      private String userRole;
      private MaterialService materialService;
      private SaleService saleService;
    /**
     * Creates new form SaleForm
     */
    public SaleForm(String userRole) throws RemoteException {
        this.userRole = userRole;
        initComponents();
         try{
        
         Registry registry = LocateRegistry.getRegistry("localhost", 6000);
        saleService = (SaleService) registry.lookup("sale");
        materialService = (MaterialService) registry.lookup("material");
        } catch(Exception ex){
            ex.printStackTrace();
        }
        setTitle("Sale Management");
        setLocationRelativeTo(null);
        if (!"Admin".equalsIgnoreCase(userRole)) {
        Insert.setVisible(false); // Hide ADD button for employees
    }
        loadSaleData();
        loadMaterials();
        
    }
    
     private void loadSaleData() throws RemoteException {
       
        List<Sale> sales = saleService.findAll();
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);
        for (Sale sale : sales) {
            model.addRow(new Object[]{
                sale.getSale_id(),
                sale.getMaterial_id(),
                sale.getCustomer_name(),
                sale.getQuantity(),
                sale.getTotal_price(),
                sale.getSale_date()
            });
        }
    }
     

private void loadMaterials() throws RemoteException {
    List<Material> materials = materialService.findAll();
    materialComboBox.removeAllItems();
    for (Material m : materials) {
        materialComboBox.addItem(m.getMaterial_id() + " - " + m.getMaterial_name());
    }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel7 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        customerNametxt = new javax.swing.JTextField();
        totalPricetxt = new javax.swing.JTextField();
        Insert = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        Dashboard = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        quantitytxt = new javax.swing.JTextField();
        materialComboBox = new javax.swing.JComboBox<>();
        saleDateChooser = new com.toedter.calendar.JDateChooser();
        jPanel2 = new javax.swing.JPanel();
        Display = new javax.swing.JButton();
        Delete = new javax.swing.JButton();
        Search = new javax.swing.JButton();
        Update = new javax.swing.JButton();
        logoutButton = new javax.swing.JButton();
        download = new javax.swing.JButton();

        jLabel7.setText("jLabel7");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 21)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("                      SALE  MANAGEMENT");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Material Id");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Customer Name");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Total Price");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Sale Date");

        Insert.setBackground(new java.awt.Color(255, 255, 0));
        Insert.setForeground(new java.awt.Color(153, 153, 0));
        Insert.setText("ADD");
        Insert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InsertActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Sale Id", "Material Id", "Customer Name", "Quantity", "Total Price", "Sale Date"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        Dashboard.setBackground(new java.awt.Color(255, 255, 0));
        Dashboard.setFont(new java.awt.Font("Tahoma", 1, 17)); // NOI18N
        Dashboard.setForeground(new java.awt.Color(204, 204, 0));
        Dashboard.setText("BACK TO DASHBOARD");
        Dashboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DashboardActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Quantity");

        materialComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        saleDateChooser.setBackground(new java.awt.Color(0, 153, 255));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(52, 52, 52))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(saleDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(132, 132, 132)
                                .addComponent(materialComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(customerNametxt, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)
                                    .addComponent(totalPricetxt)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(quantitytxt, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(185, 185, 185))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 662, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(125, 125, 125)
                        .addComponent(Insert, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(151, 151, 151)
                        .addComponent(Dashboard, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(72, 72, 72)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(materialComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(customerNametxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(quantitytxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(totalPricetxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(24, 24, 24)
                        .addComponent(jLabel6))
                    .addComponent(saleDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addComponent(Insert)
                .addGap(74, 74, 74)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(77, 77, 77)
                .addComponent(Dashboard)
                .addContainerGap(31, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(0, 102, 102));

        Display.setBackground(new java.awt.Color(255, 255, 0));
        Display.setForeground(new java.awt.Color(204, 204, 0));
        Display.setText("Display");
        Display.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DisplayActionPerformed(evt);
            }
        });

        Delete.setBackground(new java.awt.Color(255, 255, 0));
        Delete.setForeground(new java.awt.Color(153, 153, 0));
        Delete.setText("Delete");
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });

        Search.setBackground(new java.awt.Color(255, 255, 0));
        Search.setForeground(new java.awt.Color(153, 153, 0));
        Search.setText("Search");
        Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchActionPerformed(evt);
            }
        });

        Update.setBackground(new java.awt.Color(255, 255, 0));
        Update.setForeground(new java.awt.Color(153, 153, 0));
        Update.setText("Update");
        Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateActionPerformed(evt);
            }
        });

        logoutButton.setBackground(new java.awt.Color(255, 255, 0));
        logoutButton.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        logoutButton.setForeground(new java.awt.Color(153, 153, 0));
        logoutButton.setText("LOGOUT");
        logoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutButtonActionPerformed(evt);
            }
        });

        download.setBackground(new java.awt.Color(255, 255, 0));
        download.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        download.setForeground(new java.awt.Color(153, 153, 0));
        download.setText("Download");
        download.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(Update, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Display, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Delete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Search, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(logoutButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(download, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(110, 110, 110)
                .addComponent(Display)
                .addGap(54, 54, 54)
                .addComponent(Delete)
                .addGap(45, 45, 45)
                .addComponent(Search)
                .addGap(45, 45, 45)
                .addComponent(Update)
                .addGap(49, 49, 49)
                .addComponent(download)
                .addGap(46, 46, 46)
                .addComponent(logoutButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void InsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InsertActionPerformed
        // TODO add your handling code here:
 Sale sale = new Sale(); 

    // Validation
    if (customerNametxt.getText().trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Customer name is required!");
        return;
    }

    if (!quantitytxt.getText().matches("\\d+")) {
        JOptionPane.showMessageDialog(this, "Please enter a valid quantity!");
        return;
    }

    if (!totalPricetxt.getText().matches("\\d+")) {
        JOptionPane.showMessageDialog(this, "Please enter a valid price!");
        return;
    }

    if (materialComboBox.getSelectedItem() == null) {
        JOptionPane.showMessageDialog(this, "Please select a material ID!");
        return;
    }

    try {
        // ✅ Prepare sale object
        sale.setCustomer_name(customerNametxt.getText());
        
        String selectedItem = (String) materialComboBox.getSelectedItem();
        String[] parts = selectedItem.split(" - "); // parts[0] = material_id
        int materialId = Integer.parseInt(parts[0]);

        sale.setMaterial_id(materialId);
        sale.setQuantity(Integer.parseInt(quantitytxt.getText()));
        sale.setTotal_price(Integer.parseInt(totalPricetxt.getText()));

        Date date = saleDateChooser.getDate();
        if (date == null) {
            JOptionPane.showMessageDialog(this, "Please select a sale date!");
            return;
        }

        LocalDate localDate = date.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();

        // ✅ Validate if selected date is today's date
        if (!localDate.equals(LocalDate.now())) {
            JOptionPane.showMessageDialog(this, "Sale date must be today's date!");
            return;
        }

        sale.setSale_date(localDate);

        // ✅ Confirm before inserting
        int confirm = JOptionPane.showConfirmDialog(
            this,
            "Are you sure you want to register this Sale?",
            "Confirm Insertion",
            JOptionPane.OK_CANCEL_OPTION
        );

        if (confirm == JOptionPane.OK_OPTION) {
           
            int result = saleService.addSale(sale);

            if (result > 0) {
                JOptionPane.showMessageDialog(this, "✅ Sale Registered Successfully!");
                loadSaleData(); // refresh JTable

                // ✅ Clear fields after success
                customerNametxt.setText("");
                quantitytxt.setText("");
                totalPricetxt.setText("");
                saleDateChooser.setDate(null);
                materialComboBox.setSelectedIndex(-1); // no selection
            } else {
                JOptionPane.showMessageDialog(this, "❌ Failed to register Sale!");
            }
        } else {
            // ❌ User cancelled
            JOptionPane.showMessageDialog(this, "Insertion cancelled by user.");
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Unexpected error: " + e.getMessage());
    }
    }//GEN-LAST:event_InsertActionPerformed

    private void DisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DisplayActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DisplayActionPerformed

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
       
    String input = JOptionPane.showInputDialog(this, "Enter Sale ID to Delete:");

    if (input == null || input.trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Sale ID cannot be empty!", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    int sale_id;
    try {
        sale_id = Integer.parseInt(input);
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Please enter a valid numeric ID!", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // ✅ Step 2: Find the Sale using correct method
    Sale salesObj = null;
          try {
              salesObj = saleService.searchSale(sale_id);
          } catch (RemoteException ex) {
              Logger.getLogger(SaleForm.class.getName()).log(Level.SEVERE, null, ex);
          }

    if (salesObj != null) {
        // Step 3: Confirm with user
        String message = "CURRENT Sale INFO\n" +
                       "--------------------------\n" +
                       "Sale_Id      : " + salesObj.getSale_id() + "\n" +
                       "Material_Id  : " + salesObj.getMaterial_id() + "\n" +
                       "Customer Name: " + salesObj.getCustomer_name() + "\n" +
                       "Quantity     : " + salesObj.getQuantity() + "\n" +
                       "Total Price  : " + salesObj.getTotal_price() + "\n" +
                       "Sale Date    : " + salesObj.getSale_date();

        int confirm = JOptionPane.showConfirmDialog(this, message, "Confirm Deletion", JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            int rowAffected = 0;
            try {
                rowAffected = saleService.deleteSale(salesObj);
            } catch (RemoteException ex) {
                Logger.getLogger(SaleForm.class.getName()).log(Level.SEVERE, null, ex);
            }

            if (rowAffected > 0) {
                JOptionPane.showMessageDialog(this, "Data Deleted Successfully!");
                try {
                    loadSaleData(); // ✅ Refresh table
                } catch (RemoteException ex) {
                    Logger.getLogger(SaleForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Data Not Deleted!!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    } else {
        JOptionPane.showMessageDialog(this, "Sale Record Not Found!", "Not Found", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_DeleteActionPerformed

    private void SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchActionPerformed


    // Step 1: Ask for sale_id
    String input = JOptionPane.showInputDialog(this, "Enter Sale ID to Search:");

    if (input == null || input.trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Sale ID cannot be empty!", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    int sale_id;
    try {
        sale_id = Integer.parseInt(input);
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Please enter a valid numeric ID!", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Step 2: Search by sale_id using the proper DAO method
    Sale salesObj = null;
          try {
              salesObj = saleService.searchSale(sale_id); // ✅ correct method call
          } catch (RemoteException ex) {
              Logger.getLogger(SaleForm.class.getName()).log(Level.SEVERE, null, ex);
          }

    if (salesObj != null) {
        // Step 3: Display found info
        String message = "SALE INFORMATION\n" +
                         "---------------------\n" +
                         "Sale ID       : " + salesObj.getSale_id() + "\n" +
                         "Material ID   : " + salesObj.getMaterial_id() + "\n" +
                         "Customer Name : " + salesObj.getCustomer_name() + "\n" +
                         "Quantity      : " + salesObj.getQuantity() + "\n" +
                         "Total Price   : " + salesObj.getTotal_price() + "\n" +
                         "Sale Date     : " + salesObj.getSale_date();

        JOptionPane.showMessageDialog(this, message, "Search Result", JOptionPane.INFORMATION_MESSAGE);
    } else {
        JOptionPane.showMessageDialog(this, "Sale not found!", "Not Found", JOptionPane.ERROR_MESSAGE);
    }

    }//GEN-LAST:event_SearchActionPerformed

    private void UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateActionPerformed
       

    // Ask for sale ID instead of material ID
    String input = JOptionPane.showInputDialog(this, "Enter Sale ID to Update:");

    if (input == null || input.trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Sale ID cannot be empty!", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    int sale_id;
    try {
        sale_id = Integer.parseInt(input);
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Please enter a valid numeric ID!", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Fetch the Sale record by ID
    Sale salesObj = null;
          try {
              salesObj = saleService.searchSale(sale_id); // Use correct method
          } catch (RemoteException ex) {
              Logger.getLogger(SaleForm.class.getName()).log(Level.SEVERE, null, ex);
          }

    if (salesObj != null) {
        // Display current values
        String message = "CURRENT SALE INFO:\n" +
                         "--------------------------\n" +
                         "Sale ID: " + salesObj.getSale_id() + "\n" +
                         "Material ID: " + salesObj.getMaterial_id() + "\n" +
                         "Customer Name: " + salesObj.getCustomer_name() + "\n" +
                         "Quantity: " + salesObj.getQuantity() + "\n" +
                         "Total Price: " + salesObj.getTotal_price() + "\n" +
                         "Sale Date: " + salesObj.getSale_date();

        // Form to enter new values
        JPanel panel = new JPanel(new GridLayout(5, 2));

        panel.add(new JLabel("Customer Name:"));
        JTextField customerNameField = new JTextField(salesObj.getCustomer_name());
        panel.add(customerNameField);

        panel.add(new JLabel("Quantity:"));
        JTextField quantityField = new JTextField(String.valueOf(salesObj.getQuantity()));
        panel.add(quantityField);

        panel.add(new JLabel("Total Price:"));
        JTextField totalPriceField = new JTextField(String.valueOf(salesObj.getTotal_price()));
        panel.add(totalPriceField);

        panel.add(new JLabel("Sale Date (YYYY-MM-DD):"));
        JTextField saleDateField = new JTextField(salesObj.getSale_date().toString());
        panel.add(saleDateField);

        int confirm = JOptionPane.showConfirmDialog(
            this,
            new Object[] { message, panel },
            "Update Sale",
            JOptionPane.OK_CANCEL_OPTION
        );

        if (confirm == JOptionPane.OK_OPTION) {
            // Apply updates
            try {
                salesObj.setCustomer_name(customerNameField.getText());
                salesObj.setQuantity(Integer.parseInt(quantityField.getText()));
                salesObj.setTotal_price(Integer.parseInt(totalPriceField.getText()));
                salesObj.setSale_date(java.time.LocalDate.parse(saleDateField.getText()));

                int result = saleService.updateSale(salesObj);

                if (result > 0) {
                    JOptionPane.showMessageDialog(this, "Update Successful!");
                    loadSaleData(); // Refresh the JTable
                } else {
                    JOptionPane.showMessageDialog(this, "Update Failed!");
                }

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Invalid number format!", "Error", JOptionPane.ERROR_MESSAGE);
            } catch (IllegalArgumentException e) {
                JOptionPane.showMessageDialog(this, "Invalid date format! Use YYYY-MM-DD", "Error", JOptionPane.ERROR_MESSAGE);
            } catch (RemoteException ex) {
                Logger.getLogger(SaleForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    } else {
        JOptionPane.showMessageDialog(this, "Sale Not Found!");
    }

    }//GEN-LAST:event_UpdateActionPerformed

    private void DashboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DashboardActionPerformed
        // TODO add your handling code here:
          if (userRole.equalsIgnoreCase("Admin")) {
        new AdminDashboardForm().setVisible(true);
    } else if (userRole.equalsIgnoreCase("Employee")) {
        new EmployeeDashboardForm().setVisible(true);
    }
    dispose();
    }//GEN-LAST:event_DashboardActionPerformed

    private void logoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutButtonActionPerformed
        // TODO add your handling code here:
            String[] options = {"Logout", "Exit", "Cancel"};
    int choice = JOptionPane.showOptionDialog(
        this,
        "What would you like to do?",
        "Confirm",
        JOptionPane.YES_NO_CANCEL_OPTION,
        JOptionPane.QUESTION_MESSAGE,
        null,
        options,
        options[0]
    );

    switch (choice) {
        case 0: // Logout
            if ("Admin".equalsIgnoreCase(userRole)) {
                new AdminDashboardForm().setVisible(true);
            } else {
                new EmployeeDashboardForm().setVisible(true);
            }
            this.dispose();
            break;

        case 1: // Exit
            System.exit(0);
            break;

        case 2: // Cancel
        default:
            // do nothing
            break;
    }
    }//GEN-LAST:event_logoutButtonActionPerformed

    private void downloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadActionPerformed
        // TODO add your handling code here:
JFileChooser fileChooser = new JFileChooser();
    fileChooser.setDialogTitle("Save Report As");

    int userSelection = fileChooser.showSaveDialog(this);

    if (userSelection == JFileChooser.APPROVE_OPTION) {
        try {
            File fileToSave = fileChooser.getSelectedFile();
            FileWriter fw = new FileWriter(fileToSave + ".txt");

            // === HEADER ===
            fw.write("\t*** Building Material Management System Report ***\n");
            fw.write("\tDate: " + java.time.LocalDate.now() + "\n\n");
            
            // === TABLE HEADER ===
            for (int i = 0; i < jTable1.getColumnCount(); i++) {
                fw.write(String.format("%-20s", jTable1.getColumnName(i)));
            }
            fw.write("\n");
            fw.write("------------------------------------------------------------------------------------------------\n");

            // === TABLE DATA ===
            for (int i = 0; i < jTable1.getRowCount(); i++) {
                for (int j = 0; j < jTable1.getColumnCount(); j++) {
                    Object cell = jTable1.getValueAt(i, j);
                    fw.write(String.format("%-20s", cell == null ? "N/A" : cell.toString()));
                }
                fw.write("\n");
            }

            fw.write("\nReport generated successfully ✅\n");
            fw.close();
            JOptionPane.showMessageDialog(this, "✅ Report downloaded successfully!");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "❌ Error downloading report: " + ex.getMessage());
        }
    }
    }//GEN-LAST:event_downloadActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SaleForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SaleForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SaleForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SaleForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
                 try {
        for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("Nimbus".equals(info.getName())) {
                javax.swing.UIManager.setLookAndFeel(info.getClassName());
                break;
            }
        }
    } catch (Exception ex) {
        java.util.logging.Logger.getLogger(SaleForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }

    java.awt.EventQueue.invokeLater(() -> {
            try {
                new SaleForm("Admin").setVisible(true); // Or "Employee"
            } catch (RemoteException ex) {
                Logger.getLogger(SaleForm.class.getName()).log(Level.SEVERE, null, ex);
            }
    });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Dashboard;
    private javax.swing.JButton Delete;
    private javax.swing.JButton Display;
    private javax.swing.JButton Insert;
    private javax.swing.JButton Search;
    private javax.swing.JButton Update;
    private javax.swing.JTextField customerNametxt;
    private javax.swing.JButton download;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton logoutButton;
    private javax.swing.JComboBox<String> materialComboBox;
    private javax.swing.JTextField quantitytxt;
    private com.toedter.calendar.JDateChooser saleDateChooser;
    private javax.swing.JTextField totalPricetxt;
    // End of variables declaration//GEN-END:variables




}
